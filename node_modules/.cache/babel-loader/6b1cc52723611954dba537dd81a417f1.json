{"ast":null,"code":"import _objectSpread from\"/Users/kai-tenglo/Desktop/lighthouse/starting-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"/Users/kai-tenglo/Desktop/lighthouse/starting-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/kai-tenglo/Desktop/lighthouse/starting-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import CoursesContext from'./courses-context';var CoursesContextProvider=function CoursesContextProvider(props){var _useState=useState([{id:'c1',title:'React - The Complete Guide',enrolled:new Date(),goals:[],included:true}]),_useState2=_slicedToArray(_useState,2),courses=_useState2[0],setCourses=_useState2[1];var addCourse=function addCourse(title,date){var newCourse={id:Math.random().toString(),title:title,enrolled:date,goals:[],included:true};setCourses(function(prev){return prev.concat(newCourse);});};var addGoal=function addGoal(courseId,text){var newGoal={id:Math.random().toString(),text:text};setCourses(function(prevCourses){var updatedCourses=_toConsumableArray(prevCourses);var updatedCourseIndex=updatedCourses.findIndex(function(course){return course.id===courseId;});var updatedCourseGoals=updatedCourses[updatedCourseIndex].goals.concat(newGoal);var updatedCourse=_objectSpread({},updatedCourses[updatedCourseIndex]);updatedCourse.goals=updatedCourseGoals;updatedCourses[updatedCourseIndex]=updatedCourse;return updatedCourses;});};var deleteGoal=function deleteGoal(courseId,goalId){setCourses(function(prevCourses){var updatedCourses=_toConsumableArray(prevCourses);var updatedCourseIndex=updatedCourses.findIndex(function(course){return course.id===courseId;});var updatedCourseGoals=updatedCourses[updatedCourseIndex].goals.filter(function(goal){return goal.id!==goalId;});var updatedCourse=_objectSpread({},updatedCourses[updatedCourseIndex]);updatedCourse.goals=updatedCourseGoals;updatedCourses[updatedCourseIndex]=updatedCourse;return updatedCourses;});};var updateGoal=function updateGoal(courseId,goalId,newText){setCourses(function(prevCourses){var updatedCourses=_toConsumableArray(prevCourses);var updatedCourseIndex=updatedCourses.findIndex(function(course){return course.id===courseId;});var updatedCourseGoals=updatedCourses[updatedCourseIndex].goals.slice();//.slice() returns a copy of the array\nvar updatedCourseGoalIndex=updatedCourseGoals.findIndex(function(goal){return goal.id===goalId;});var updatedGoal=_objectSpread(_objectSpread({},updatedCourseGoals[updatedCourseGoalIndex]),{},{text:newText});updatedCourseGoals[updatedCourseGoalIndex]=updatedGoal;var updatedCourse=_objectSpread({},updatedCourses[updatedCourseIndex]);updatedCourse.goals=updatedCourseGoals;updatedCourses[updatedCourseIndex]=updatedCourse;return updatedCourses;});};var changeCourseFilter=function changeCourseFilter(courseId,isIncluded){setCourses(function(prevCourses){var updatedCourses=_toConsumableArray(prevCourses);var updatedCourseIndex=updatedCourses.findIndex(function(course){return course.id===courseId;});var updatedCourse=_objectSpread(_objectSpread({},updatedCourses[updatedCourseIndex]),{},{included:isIncluded});updatedCourses[updatedCourseIndex]=updatedCourse;return updatedCourses;});};return/*#__PURE__*/React.createElement(CoursesContext.Provider,{value:{courses:courses,addGoal:addGoal,addCourse:addCourse,deleteGoal:deleteGoal,updateGoal:updateGoal,changeCourseFilter:changeCourseFilter}},props.children);};export default CoursesContextProvider;","map":{"version":3,"sources":["/Users/kai-tenglo/Desktop/lighthouse/starting-project/src/data/CoursesContextProvider.tsx"],"names":["React","useState","CoursesContext","CoursesContextProvider","props","id","title","enrolled","Date","goals","included","courses","setCourses","addCourse","date","newCourse","Math","random","toString","prev","concat","addGoal","courseId","text","newGoal","prevCourses","updatedCourses","updatedCourseIndex","findIndex","course","updatedCourseGoals","updatedCourse","deleteGoal","goalId","filter","goal","updateGoal","newText","slice","updatedCourseGoalIndex","updatedGoal","changeCourseFilter","isIncluded","children"],"mappings":"2gBAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CAEA,MAAOC,CAAAA,cAAP,KAA6C,mBAA7C,CAEA,GAAMC,CAAAA,sBAAgC,CAAG,QAAnCA,CAAAA,sBAAmC,CAACC,KAAD,CAAW,eACpBH,QAAQ,CAAW,CAC/C,CACEI,EAAE,CAAE,IADN,CAEEC,KAAK,CAAE,4BAFT,CAGEC,QAAQ,CAAE,GAAIC,CAAAA,IAAJ,EAHZ,CAIEC,KAAK,CAAE,EAJT,CAKEC,QAAQ,CAAE,IALZ,CAD+C,CAAX,CADY,wCAC3CC,OAD2C,eAClCC,UADkC,eAWlD,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACP,KAAD,CAAgBQ,IAAhB,CAA+B,CAC/C,GAAMC,CAAAA,SAAiB,CAAG,CACxBV,EAAE,CAAEW,IAAI,CAACC,MAAL,GAAcC,QAAd,EADoB,CAExBZ,KAAK,CAALA,KAFwB,CAGxBC,QAAQ,CAAEO,IAHc,CAIxBL,KAAK,CAAE,EAJiB,CAKxBC,QAAQ,CAAE,IALc,CAA1B,CAOAE,UAAU,CAAC,SAAAO,IAAI,QAAIA,CAAAA,IAAI,CAACC,MAAL,CAAYL,SAAZ,CAAJ,EAAL,CAAV,CACD,CATD,CAWA,GAAMM,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,QAAD,CAAmBC,IAAnB,CAAoC,CAClD,GAAMC,CAAAA,OAAa,CAAG,CACpBnB,EAAE,CAAEW,IAAI,CAACC,MAAL,GAAcC,QAAd,EADgB,CAEpBK,IAAI,CAAJA,IAFoB,CAAtB,CAIAX,UAAU,CAAC,SAAAa,WAAW,CAAI,CACxB,GAAMC,CAAAA,cAAc,oBAAOD,WAAP,CAApB,CACA,GAAME,CAAAA,kBAAkB,CAAGD,cAAc,CAACE,SAAf,CAAyB,SAAAC,MAAM,QAAIA,CAAAA,MAAM,CAACxB,EAAP,GAAciB,QAAlB,EAA/B,CAA3B,CACA,GAAMQ,CAAAA,kBAAkB,CAAGJ,cAAc,CAACC,kBAAD,CAAd,CAAmClB,KAAnC,CAAyCW,MAAzC,CAAgDI,OAAhD,CAA3B,CACA,GAAMO,CAAAA,aAAa,kBAAQL,cAAc,CAACC,kBAAD,CAAtB,CAAnB,CACAI,aAAa,CAACtB,KAAd,CAAsBqB,kBAAtB,CACAJ,cAAc,CAACC,kBAAD,CAAd,CAAqCI,aAArC,CAEA,MAAOL,CAAAA,cAAP,CACD,CATS,CAAV,CAUD,CAfD,CAiBA,GAAMM,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACV,QAAD,CAAmBW,MAAnB,CAAsC,CACvDrB,UAAU,CAAC,SAAAa,WAAW,CAAI,CACxB,GAAMC,CAAAA,cAAc,oBAAOD,WAAP,CAApB,CACA,GAAME,CAAAA,kBAAkB,CAAGD,cAAc,CAACE,SAAf,CAAyB,SAAAC,MAAM,QAAIA,CAAAA,MAAM,CAACxB,EAAP,GAAciB,QAAlB,EAA/B,CAA3B,CACA,GAAMQ,CAAAA,kBAAkB,CAAGJ,cAAc,CAACC,kBAAD,CAAd,CAAmClB,KAAnC,CAAyCyB,MAAzC,CAAgD,SAAAC,IAAI,QAAIA,CAAAA,IAAI,CAAC9B,EAAL,GAAY4B,MAAhB,EAApD,CAA3B,CACA,GAAMF,CAAAA,aAAa,kBAAQL,cAAc,CAACC,kBAAD,CAAtB,CAAnB,CACAI,aAAa,CAACtB,KAAd,CAAsBqB,kBAAtB,CACAJ,cAAc,CAACC,kBAAD,CAAd,CAAqCI,aAArC,CAEA,MAAOL,CAAAA,cAAP,CACD,CATS,CAAV,CAUD,CAXD,CAaA,GAAMU,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACd,QAAD,CAAmBW,MAAnB,CAAmCI,OAAnC,CAAuD,CACxEzB,UAAU,CAAC,SAAAa,WAAW,CAAI,CACxB,GAAMC,CAAAA,cAAc,oBAAOD,WAAP,CAApB,CACA,GAAME,CAAAA,kBAAkB,CAAGD,cAAc,CAACE,SAAf,CAAyB,SAAAC,MAAM,QAAIA,CAAAA,MAAM,CAACxB,EAAP,GAAciB,QAAlB,EAA/B,CAA3B,CACA,GAAMQ,CAAAA,kBAAkB,CAAGJ,cAAc,CAACC,kBAAD,CAAd,CAAmClB,KAAnC,CAAyC6B,KAAzC,EAA3B,CAA6E;AAC7E,GAAMC,CAAAA,sBAAsB,CAAGT,kBAAkB,CAACF,SAAnB,CAA6B,SAAAO,IAAI,QAAIA,CAAAA,IAAI,CAAC9B,EAAL,GAAY4B,MAAhB,EAAjC,CAA/B,CACA,GAAMO,CAAAA,WAAW,gCAAQV,kBAAkB,CAACS,sBAAD,CAA1B,MAAoDhB,IAAI,CAAEc,OAA1D,EAAjB,CACAP,kBAAkB,CAACS,sBAAD,CAAlB,CAA6CC,WAA7C,CACA,GAAMT,CAAAA,aAAa,kBAAQL,cAAc,CAACC,kBAAD,CAAtB,CAAnB,CACAI,aAAa,CAACtB,KAAd,CAAsBqB,kBAAtB,CACAJ,cAAc,CAACC,kBAAD,CAAd,CAAqCI,aAArC,CAEA,MAAOL,CAAAA,cAAP,CACD,CAZS,CAAV,CAaD,CAdD,CAgBA,GAAMe,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACnB,QAAD,CAAmBoB,UAAnB,CAA2C,CACpE9B,UAAU,CAAC,SAAAa,WAAW,CAAI,CACxB,GAAMC,CAAAA,cAAc,oBAAOD,WAAP,CAApB,CACA,GAAME,CAAAA,kBAAkB,CAAGD,cAAc,CAACE,SAAf,CAAyB,SAAAC,MAAM,QAAIA,CAAAA,MAAM,CAACxB,EAAP,GAAciB,QAAlB,EAA/B,CAA3B,CACA,GAAMS,CAAAA,aAAa,gCAAQL,cAAc,CAACC,kBAAD,CAAtB,MAA4CjB,QAAQ,CAAEgC,UAAtD,EAAnB,CACAhB,cAAc,CAACC,kBAAD,CAAd,CAAqCI,aAArC,CAEA,MAAOL,CAAAA,cAAP,CACD,CAPS,CAAV,CAQD,CATD,CAWA,mBAAO,oBAAC,cAAD,CAAgB,QAAhB,EAAyB,KAAK,CAAE,CAACf,OAAO,CAAPA,OAAD,CAAUU,OAAO,CAAPA,OAAV,CAAmBR,SAAS,CAATA,SAAnB,CAA8BmB,UAAU,CAAVA,UAA9B,CAA0CI,UAAU,CAAVA,UAA1C,CAAsDK,kBAAkB,CAAlBA,kBAAtD,CAAhC,EAA6GrC,KAAK,CAACuC,QAAnH,CAAP,CACD,CAhFD,CAkFA,cAAexC,CAAAA,sBAAf","sourcesContent":["import React, { useState } from 'react';\n\nimport CoursesContext, { Course, Goal } from './courses-context';\n\nconst CoursesContextProvider: React.FC = (props) => {\n  const [courses, setCourses] = useState<Course[]>([\n    {\n      id: 'c1', \n      title: 'React - The Complete Guide', \n      enrolled: new Date(),\n      goals: [], \n      included: true\n    }\n  ]);\n\n  const addCourse = (title: string, date: Date) => {\n    const newCourse: Course = {\n      id: Math.random().toString(), \n      title, \n      enrolled: date, \n      goals: [], \n      included: true\n    };\n    setCourses(prev => prev.concat(newCourse));\n  };\n\n  const addGoal = (courseId: string, text: string) => {\n    const newGoal: Goal = {\n      id: Math.random().toString(),\n      text\n    };\n    setCourses(prevCourses => {\n      const updatedCourses = [...prevCourses];\n      const updatedCourseIndex = updatedCourses.findIndex(course => course.id === courseId);\n      const updatedCourseGoals = updatedCourses[updatedCourseIndex].goals.concat(newGoal);\n      const updatedCourse = { ...updatedCourses[updatedCourseIndex] };\n      updatedCourse.goals = updatedCourseGoals;\n      updatedCourses[updatedCourseIndex] = updatedCourse;\n\n      return updatedCourses;\n    });\n  };\n\n  const deleteGoal = (courseId: string, goalId: string) => {\n    setCourses(prevCourses => {\n      const updatedCourses = [...prevCourses];\n      const updatedCourseIndex = updatedCourses.findIndex(course => course.id === courseId);\n      const updatedCourseGoals = updatedCourses[updatedCourseIndex].goals.filter(goal => goal.id !== goalId);\n      const updatedCourse = { ...updatedCourses[updatedCourseIndex] };\n      updatedCourse.goals = updatedCourseGoals;\n      updatedCourses[updatedCourseIndex] = updatedCourse;\n\n      return updatedCourses;\n    });\n  };\n\n  const updateGoal = (courseId: string, goalId: string, newText: string) => {\n    setCourses(prevCourses => {\n      const updatedCourses = [...prevCourses];\n      const updatedCourseIndex = updatedCourses.findIndex(course => course.id === courseId);\n      const updatedCourseGoals = updatedCourses[updatedCourseIndex].goals.slice(); //.slice() returns a copy of the array\n      const updatedCourseGoalIndex = updatedCourseGoals.findIndex(goal => goal.id === goalId);\n      const updatedGoal = { ...updatedCourseGoals[updatedCourseGoalIndex], text: newText };\n      updatedCourseGoals[updatedCourseGoalIndex] = updatedGoal;\n      const updatedCourse = { ...updatedCourses[updatedCourseIndex] };\n      updatedCourse.goals = updatedCourseGoals;\n      updatedCourses[updatedCourseIndex] = updatedCourse;\n\n      return updatedCourses;\n    });\n  };\n\n  const changeCourseFilter = (courseId: string, isIncluded: boolean) => {\n    setCourses(prevCourses => {\n      const updatedCourses = [...prevCourses];\n      const updatedCourseIndex = updatedCourses.findIndex(course => course.id === courseId);\n      const updatedCourse = { ...updatedCourses[updatedCourseIndex], included: isIncluded };\n      updatedCourses[updatedCourseIndex] = updatedCourse;\n\n      return updatedCourses;\n    });\n  };\n\n  return <CoursesContext.Provider value={{courses, addGoal, addCourse, deleteGoal, updateGoal, changeCourseFilter}} >{props.children}</CoursesContext.Provider>;\n};\n\nexport default CoursesContextProvider;"]},"metadata":{},"sourceType":"module"}